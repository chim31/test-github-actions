name: chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: "URL_DU_MIRROR"
  EXECUTABLES: "chemin/vers/executable1,chemin/vers/executable2"

jobs:
  check_coding_style:
    name: Vérification du coding style
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v4

      - name: Exécuter le vérificateur de coding style
        run: check.sh $(pwd) $(pwd)

      - name: Analyser les erreurs
        run: |
          if [ -f coding-style-reports.log ]; then
            while IFS= read -r line; do
              echo "::error file=$(echo "$line" | cut -d':' -f1),line=$(echo "$line" | cut -d':' -f2),title=Coding Style Error::$line"
            done < coding-style-reports.log
            exit 1
          fi
  check_program_compilation:
    name: "Check Program Compilation"
    runs-on: ubuntu-latest
    needs: check_coding_style
    container: epitechcontent/epitest-docker

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Compile the Project
        run: |
          make
        timeout-minutes: 2

      - name: Clean the Project
        run: |
          make clean

      - name: Verify Executables
        run: |
          IFS=',' read -ra EXEC_FILES <<< "$EXECUTABLES"
          for file in "${EXEC_FILES[@]}"; do
            if [[ ! -x "$file" ]]; then
              echo "::error file=$file::Executable not found or not executable"
              exit 1
            fi
          done
  run_tests:
    name: "Run Tests"
    runs-on: ubuntu-latest
    needs: check_program_compilation
    container: epitechcontent/epitest-docker

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Project Tests
        run: |
          make tests_run
        timeout-minutes: 2
  push_to_mirror:
    name: "Push to Mirror"
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Mirror Repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}

